1 语句和表达式
  语句“做事情”  var foo;

  表达式产生值  通常是函数的参数 或是赋值的右边部分
  5 * 8

  语句的方式:
  var x;
  if(y >= 0){
    x = y;
  }else{
    x = -y;
  }

  表达式的方式
  var x = y >= 0 ? y : -y;

  表达式方式可以用于函数的参数,而语句不可以

  MyFunction(y >= 0 ? y : -y)

2 分号
  分号用于结束语句，而不是结束块
  有一种情况分号出现在块之后:函数表达式作为一个表达式时,如果这样的表达式出现在语句的最后
  它后面就会跟上一个分号

  var f = function(){};

3 注释
  单行 //
  多行 /**
       *
       *js
       */
4 变量
  区分大小写
  第一个字符 任意Unicode字符(不包括数字) $ 下划线

5 原始值与对象
  原始值: 布尔值  数字 字符串 null undefined
  其他值是对象

  对象比较是通过内存地址

  原始值比较是通过编码值

  typeof        主要用于检查原始值

  instanceof    主要用于检查对象


  typeof的结果:
  undefined            undefined
  null                 object
  布尔值                boolean
  数字值                number
  字符串                string
  函数                  function
  对象                  object

  instanceof用法:
  value instanceof constructor

  如果value是一个通过constructor构造器创建的对象

  假值
  undefined
  null
  false
  0
  NaN
  ''

  闭包
  函数以及它所连接的周围作用域中的变量即为闭包

  IIFE:引入一个新的作用域
  (function(){ // open IIFE

  }()）// close IIFE

  forEach
  forEach 方法按升序为数组中含有效值的每一项执行一次callback 函数，那些已删除（
  使用delete方法等情况）或者从未赋值的项将被跳过
  （但不包括那些值为 undefined 的项）。
  callback 函数会被依次传入三个参数：
  数组当前项的值
  数组当前项的索引
  数组对象本身
  如果给forEach传递了thisArg 参数，它将作为 callback 函数的执行上下文，
  类似执行如下函数callback.call(thisArg, element, index, array)。
  如果 thisArg 值为 undefined 或 null，函数的 this 值取决于当前执行环境是否为严格模式
  （严格模式下为 undefined，非严格模式下为全局对象）。

  forEach 遍历的范围在第一次调用 callback 前就会确定。调用forEach 后添加到
  数组中的项不会被 callback 访问到。如果已经存在的值被改变，
  则传递给 callback 的值是 forEach 遍历到他们那一刻的值。已删除的项不会被遍历到。

  eval
  eval在语句的上下文中解析它的参数,如果希望eval返回一个对象,需要用小括号将对象字面量括起来
  04.js

  严格模式：
    变量必须声明
    所有函数必须在顶级作用域声明,这就意味着不能在块内声明函数
    如果消除这个限制,通过函数声明式
    arguments对象拥有更少的属性
    无方法的函数中this的值为undefined
    对属性的非法操作会抛出异常
    例如对于只读属性的设定操作就抛出异常
    不可以删除不可设置属性
    with语句不能使用
    没有八进制数字

  undefined
    访问未初始化的变量
    缺失的参数
    缺失的属性
    函数隐式返回

  null
    null是原型链最顶端
    Object.getPrototypeOf(Object.prototype)  // null

    当字符串没有匹配到正则表达式的结果 reg.exec()  // null

    选择器没有匹配的元素                         // null

    Number(undefined)      // NaN

    5 + undefined          // NaN

    Number(null)           // 0

    5 + null               // 5

    void 0                 // undefined

  原始值的包装与去包装
  包装
  new Boolean(true)
  new Number(123)
  new String('abc')

  去包装
  通过调用valueOf()来去包装
  new Boolean(true).valueOf()
  new Number(123).valueOf()
  new String('abc').valueOf()

  将包装对象转换为原始值时只能正确提取数字和字符串,而布尔值不能
  Boolean(new Boolean(true)) // true
  Number(new Number(123))    // 123
  String(new String('abc'))  // 'abc'

  原始值从包装器借调方法
  原始值没有私有方法,但是他们会从各自的包装器中借调方法
  ‘abc’.charAt === String.prototype.charAt  // true

  宽松模式
  原始值在运行过程中转换为包装器
  String.prototype.sloppyMethod = function(){
    console.log(typeof this); // object
    console.log(this instanceof String); // true
  }

  严格模式
  原始值在运行过程中转换为包装器
  String.prototype.strictMethod = function(){
    'use strict';
    console.log(typeof this); // string
    console.log(this instanceof String); // false
  }

  强制类型转换
  
