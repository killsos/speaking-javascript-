1 语句和表达式
  语句“做事情”  var foo;

  表达式产生值  通常是函数的参数 或是赋值的右边部分
  5 * 8

  语句的方式:
  var x;
  if(y >= 0){
    x = y;
  }else{
    x = -y;
  }

  表达式的方式
  var x = y >= 0 ? y : -y;

  表达式方式可以用于函数的参数,而语句不可以

  MyFunction(y >= 0 ? y : -y)

2 分号
  分号用于结束语句，而不是结束块
  有一种情况分号出现在块之后:函数表达式作为一个表达式时,如果这样的表达式出现在语句的最后
  它后面就会跟上一个分号

  var f = function(){};

3 注释
  单行 //
  多行 /**
       *
       *js
       */
4 变量
  区分大小写
  第一个字符 任意Unicode字符(不包括数字) $ 下划线

5 原始值与对象
  原始值: 布尔值  数字 字符串 null undefined
  其他值是对象

  对象比较是通过内存地址

  原始值比较是通过编码值

  typeof        主要用于检查原始值

  instanceof    主要用于检查对象


  typeof的结果:
  undefined            undefined
  null                 object
  布尔值                boolean
  数字值                number
  字符串                string
  函数                  function
  对象                  object

  instanceof用法:
  value instanceof constructor

  如果value是一个通过constructor构造器创建的对象

  假值
  undefined
  null
  false
  0
  NaN
  ''

  闭包
  函数以及它所连接的周围作用域中的变量即为闭包

  IIFE:引入一个新的作用域
  (function(){ // open IIFE

  }()）// close IIFE

  forEach
  forEach 方法按升序为数组中含有效值的每一项执行一次callback 函数，那些已删除（
  使用delete方法等情况）或者从未赋值的项将被跳过
  （但不包括那些值为 undefined 的项）。
  callback 函数会被依次传入三个参数：
  数组当前项的值
  数组当前项的索引
  数组对象本身
  如果给forEach传递了thisArg 参数，它将作为 callback 函数的执行上下文，
  类似执行如下函数callback.call(thisArg, element, index, array)。
  如果 thisArg 值为 undefined 或 null，函数的 this 值取决于当前执行环境是否为严格模式
  （严格模式下为 undefined，非严格模式下为全局对象）。

  forEach 遍历的范围在第一次调用 callback 前就会确定。调用forEach 后添加到
  数组中的项不会被 callback 访问到。如果已经存在的值被改变，
  则传递给 callback 的值是 forEach 遍历到他们那一刻的值。已删除的项不会被遍历到。
